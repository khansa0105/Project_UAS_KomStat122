# 1. Memuat Semua Library yang Dibutuhkan
install.packages("shinycssloaders")
install.packages("plotly")
library(shiny)
library(DT)
library(ggplot2)
library(dplyr)
library(bslib)
library(thematic)
library(shinyjs)
library(car)
library(scales)
library(stringr)
library(tibble)
library(multcomp)
library(plotly)          # Untuk plot interaktif
library(shinycssloaders) # Untuk animasi loading

# 2. Pengaturan Tema & Visual
thematic_shiny()
app_theme <- bs_theme(
  version = 5,
  bg = "#F4FBF6", fg = "#1A4D2E", # Background lebih lembut, teks hijau tua
  primary = "#85CB33", # Hijau utama yang lebih cerah
  secondary = "#A3D18C", # Hijau sekunder yang lebih muda
  success = "#20C997",
  base_font = font_google("Poppins", local = FALSE),
  heading_font = font_google("Quicksand", local = FALSE),
  "card-bg" = "#FFFFFF",
  "card-border-color" = "#D1E7DD", # Border kartu hijau muda
  "card-border-width" = "1px",
  "card-box-shadow" = "0 2px 5px rgba(0, 0, 0, 0.05)",
  "btn-primary-bg" = "#A3D18C",
  "btn-primary-border" = "#A3D18C",
  "btn-primary-hover-bg" = "#85CB33",
  "btn-primary-hover-border" = "#85CB33",
  "link-color" = "#1A4D2E"
)

# 3. User Interface (UI) - Tampilan Aplikasi
ui <- navbarPage(
  title = div(icon("chart-bar"), "Analisis Rancangan Percobaan"),
  theme = app_theme,
  collapsible = TRUE,
  useShinyjs(),
  
  # Halaman 1: Dashboard / Selamat Datang
  tabPanel("Dashboard", icon = icon("home"),
           fluidPage(
             br(),
             div(style = "text-align: center; padding: 20px;",
                 h1("Selamat Datang di Aplikasi Analisis Statistik"),
                 p(class = "lead", "Alat bantu interaktif untuk menganalisis Rancangan Acak Lengkap (RAL) dan Rancangan Acak Kelompok (RAK)."),
                 br(),
                 p("Mulai dengan mengunggah data Anda di panel kontrol pada tab 'Analisis'."),
                 hr()
             ),
             fluidRow(
               column(6,
                      card(
                        card_header(tags$h5(icon("lightbulb"), " Fitur Utama")),
                        card_body(
                          tags$ul(
                            tags$li("Analisis ANOVA untuk RAL & RAK."),
                            tags$li("Uji Asumsi Klasik (Normalitas, Homogenitas, Independensi)."),
                            tags$li("Plot Boxplot Interaktif dengan notasi Uji Lanjut Tukey."),
                            tags$li("Transformasi Data (Log & Akar Kuadrat)."),
                            tags$li("Deteksi Jenis Rancangan Otomatis.")
                          )
                        )
                      )
               ),
               column(6,
                      card(
                        card_header(tags$h5(icon("list-ol"), " Langkah Cepat")),
                        card_body(
                          tags$ol(
                            tags$li("Buka tab 'Analisis' di navigasi atas."),
                            tags$li("Unggah file .csv Anda di 'Panel Kontrol' sebelah kiri."),
                            tags$li("Atur konfigurasi (jenis rancangan, variabel, dll)."),
                            tags$li("Klik 'Jalankan Analisis' dan lihat hasilnya!")
                          )
                        )
                      )
               )
             )
           )
  ),
  
  # Halaman 2: Analisis Utama
  tabPanel("Analisis", icon = icon("table-cells"),
           sidebarLayout(
             sidebarPanel(
               width = 4,
               h4(icon("sliders-h"), " Panel Kontrol"), hr(),
               fileInput("file_input", "Unggah File CSV Anda", accept = c("text/csv", ".csv")),
               radioButtons("design_type", "Pilih Jenis Rancangan:",
                            choices = c("Rancangan Acak Lengkap (RAL)" = "RAL", "Rancangan Acak Kelompok (RAK)" = "RAK")),
               uiOutput("treatment_var_ui"),
               conditionalPanel("input.design_type == 'RAK'", uiOutput("block_var_ui")),
               uiOutput("response_var_ui"),
               
               selectInput("transformation_type", "Transformasi Data Respons (jika perlu):",
                           choices = c("Tidak Ada (Asli)" = "none",
                                       "Logaritma Natural (Log)" = "log",
                                       "Akar Kuadrat (Sqrt)" = "sqrt")),
               
               sliderInput("alpha", "Pilih Taraf Nyata (Î±):", min = 0.01, max = 0.10, value = 0.05, step = 0.01),
               div(actionButton("run_analysis", "Jalankan Analisis", icon = icon("play-circle"), class = "btn-success btn-lg w-100"), align = "center")
             ),
             mainPanel(
               width = 8,
               # Tampilan hasil akan di-render di sini
               uiOutput("main_output_ui")
             )
           )
  ),
  
  # Halaman 3: Panduan
  tabPanel("Panduan", icon = icon("book-open"),
           fluidPage(
             br(),
             h3("Panduan Penggunaan dan Format Data"),
             hr(),
             card(card_header(tags$h5(icon("file-csv"), " Contoh Format Data RAL")),
                  card_body(
                    tags$p("Data untuk RAL minimal memiliki 2 kolom. Satu kolom untuk perlakuan (kategorikal) dan satu kolom untuk respons (numerik)."),
                    tags$table(class = "table table-bordered table-sm", style = "width: auto;",
                               tags$thead(tags$tr(tags$th("Perlakuan"), tags$th("Respons"))),
                               tags$tbody(
                                 tags$tr(tags$td("Pupuk A"), tags$td("25.5")), tags$tr(tags$td("Pupuk A"), tags$td("26.7")),
                                 tags$tr(tags$td("Pupuk A"), tags$td("24.9")), tags$tr(tags$td("Pupuk B"), tags$td("28.1")),
                                 tags$tr(tags$td("Pupuk B"), tags$td("29.0"))
                               )))),
             card(card_header(tags$h5(icon("file-csv"), " Contoh Format Data RAK")),
                  card_body(
                    tags$p("Data untuk RAK minimal memiliki 3 kolom. Kolom untuk perlakuan, kelompok (kategorikal), dan respons (numerik)."),
                    tags$table(class = "table table-bordered table-sm", style = "width: auto;",
                               tags$thead(tags$tr(tags$th("Perlakuan"), tags$th("Kelompok"), tags$th("Respons"))),
                               tags$tbody(
                                 tags$tr(tags$td("Varietas A"), tags$td("Blok 1"), tags$td("5.2")), tags$tr(tags$td("Varietas B"), tags$td("Blok 1"), tags$td("5.9")),
                                 tags$tr(tags$td("Varietas A"), tags$td("Blok 2"), tags$td("5.4")), tags$tr(tags$td("Varietas B"), tags$td("Blok 2"), tags$td("6.1")),
                                 tags$tr(tags$td("Varietas A"), tags$td("Blok 3"), tags$td("5.0"))
                               ))))
           )
  )
)

# 4. Server Logic
server <- function(input, output, session) {
  
  data_input <- reactive({ req(input$file_input); read.csv(input$file_input$datapath, header = TRUE, stringsAsFactors = TRUE) })
  output$treatment_var_ui <- renderUI({ req(data_input()); selectInput("treatment_var", "Pilih Variabel Perlakuan:", choices = names(data_input())) })
  output$block_var_ui <- renderUI({ req(data_input()); selectInput("block_var", "Pilih Variabel Kelompok/Blok:", choices = names(data_input())) })
  output$response_var_ui <- renderUI({ req(data_input()); numeric_cols <- names(data_input())[sapply(data_input(), is.numeric)]; selectInput("response_var", "Pilih Variabel Respons (Numerik):", choices = numeric_cols) })
  
  # --- [FITUR BARU] Otomatis memilih jenis rancangan berdasarkan nama kolom ---
  observeEvent(input$file_input, {
    req(input$file_input)
    df <- read.csv(input$file_input$datapath, header = TRUE, nrows = 1) # Cukup baca baris pertama untuk nama kolom
    col_names <- tolower(names(df))
    
    # Daftar kata kunci untuk variabel kelompok/blok
    block_keywords <- c("kelompok", "blok", "block", "ulangan", "replikasi", "replication")
    
    # Periksa apakah ada nama kolom yang cocok dengan kata kunci
    is_rak_data <- any(block_keywords %in% col_names)
    
    if (is_rak_data) {
      # Jika ditemukan kata kunci, pilih RAK
      updateRadioButtons(session, "design_type", selected = "RAK")
      showNotification("Terdeteksi kolom kelompok. Jenis rancangan diubah ke RAK.", type = "message")
    } else {
      # Jika tidak, biarkan default (RAL)
      updateRadioButtons(session, "design_type", selected = "RAL")
    }
  })
  # --- AKHIR FITUR BARU ---
  
  transformed_data <- reactive({
    req(data_input(), input$response_var, input$transformation_type)
    df <- data_input()
    resp_var <- input$response_var
    
    if (input$transformation_type == "log" && any(df[[resp_var]] <= 0, na.rm = TRUE)) {
      showNotification("Transformasi Log tidak dapat diterapkan pada nilai non-positif (<= 0).", type = "error", duration = 10)
      return(NULL)
    }
    if (input$transformation_type == "sqrt" && any(df[[resp_var]] < 0, na.rm = TRUE)) {
      showNotification("Transformasi Akar Kuadrat tidak dapat diterapkan pada nilai negatif.", type = "error", duration = 10)
      return(NULL)
    }
    
    if (input$transformation_type == "log") {
      df[[resp_var]] <- log(df[[resp_var]])
    } else if (input$transformation_type == "sqrt") {
      df[[resp_var]] <- sqrt(df[[resp_var]])
    }
    
    return(df)
  })
# --- Proses Analisis Utama ---
  analysis_results <- eventReactive(input$run_analysis, {
    req(transformed_data(), input$treatment_var, input$response_var, input$alpha)
    df <- transformed_data()
    req(df)
    
    df[[input$treatment_var]] <- as.factor(df[[input$treatment_var]])
    model <- tryCatch({
      if (input$design_type == "RAL") {
        formula_text <- paste0("`", input$response_var, "` ~ `", input$treatment_var, "`")
      } else {
        req(input$block_var)
        df[[input$block_var]] <- as.factor(df[[input$block_var]])
        formula_text <- paste0("`", input$response_var, "` ~ `", input$block_var, "` + `", input$treatment_var, "`")
      }
      aov(as.formula(formula_text), data = df)
    }, error = function(e) {
      showNotification(paste("Error saat membuat model ANOVA:", e$message), type = "error", duration = 10)
      return(NULL) 
    })
    
    if (is.null(model)) return(list(error = TRUE, error_msg = "Gagal total membuat model ANOVA. Periksa kembali struktur data dan pemilihan variabel Anda."))
    
    summary_model <- try(summary(model), silent = TRUE)
    tukey_test <- try(TukeyHSD(model, which = input$treatment_var, conf.level = 1 - input$alpha), silent = TRUE)
    shapiro_res <- try(shapiro.test(residuals(model)), silent = TRUE)
    durbin_watson_res <- try(durbinWatsonTest(model), silent = TRUE)
    levene_res <- try(leveneTest(residuals(model) ~ df[[input$treatment_var]]), silent = TRUE)
    
    p_value_treatment <- NULL; p_value_block <- NULL
    if (!inherits(summary_model, "try-error")) {
      summary_df <- summary_model[[1]]
      if (input$design_type == "RAK" && nrow(summary_df) >= 2) {
        p_value_block <- summary_df$`Pr(>F)`[1]; p_value_treatment <- summary_df$`Pr(>F)`[2]
      } else if (input$design_type == "RAL" && nrow(summary_df) >= 1) {
        p_value_treatment <- summary_df$`Pr(>F)`[1]
      }
    }
    
    cld_letters <- NULL
    if (!is.null(p_value_treatment) && p_value_treatment < input$alpha) {
      cld_letters <- try({
        treatment_name <- input$treatment_var
        mcp_call <- eval(parse(text = sprintf("mcp(%s = 'Tukey')", treatment_name)))
        tukey_glht <- multcomp::glht(model, linfct = mcp_call)
        tukey_cld <- multcomp::cld(tukey_glht, level = input$alpha)
        cld_letters_df <- as.data.frame(tukey_cld$mcletters$Letters)
        names(cld_letters_df) <- "cld"
        cld_letters_df %>% rownames_to_column(var = treatment_name)
      }, silent = TRUE)
      if (inherits(cld_letters, "try-error")) cld_letters <- NULL
    }
    
    cv_value <- try({(sqrt(anova(model)["Residuals", "Mean Sq"]) / mean(data_input()[[input$response_var]], na.rm = TRUE)) * 100}, silent = TRUE)
    
    list(error = FALSE, model = model, model_summary = summary_model, tukey_summary = tukey_test, shapiro_test = shapiro_res,
         levene_test = levene_res, durbin_watson_test = durbin_watson_res, p_value_treatment = p_value_treatment, 
         p_value_block = p_value_block, cv = cv_value, cld_results = cld_letters)
  })
  
  # --- Render UI Utama di Server ---
  output$main_output_ui <- renderUI({
    # Tampilkan pesan awal jika belum ada file
    if(is.null(input$file_input)) {
      return(div(style="text-align:center; padding-top: 50px;",
                 h4("Silakan unggah file data Anda untuk memulai analisis.")))
    }
    
    # Tampilkan tab setelah file diunggah
    tabsetPanel(
      id = "main_tabs",
      tabPanel("Data Anda", icon = icon("table"), withSpinner(DTOutput("data_table"))),
      tabPanel("Boxplot Interaktif", icon = icon("chart-pie"), withSpinner(plotlyOutput("boxplot", height = "500px"))),
      tabPanel("Diagnostik & Uji Asumsi", icon = icon("stethoscope"), br(), uiOutput("assumption_ui")),
      tabPanel("Hasil ANOVA", icon = icon("calculator"), br(), uiOutput("anova_results_ui")),
      tabPanel("Uji Lanjut", icon = icon("vials"), br(), uiOutput("uji_lanjut_ui_output"))
    )
  })
